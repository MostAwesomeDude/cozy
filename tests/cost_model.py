import unittest
import itertools
from collections import OrderedDict

from cozy.common import OrderedSet
from cozy.cost_model import CostModel, Order, debug_comparison, asymptotic_runtime
from cozy.typecheck import INT, retypecheck, typecheck
from cozy.target_syntax import *
from cozy.syntax_tools import equal, pprint, fresh_var, mk_lambda, subst, free_vars, all_exps
from cozy.solver import valid
from cozy.pools import RUNTIME_POOL, STATE_POOL
from cozy.contexts import RootCtx
from cozy.synthesis.acceleration import optimized_exists
from cozy import parse

def get_ops(x):
    spec = parse.parse_spec(x)
    errs = typecheck(spec)
    assert not errs, errs
    ops = []
    for method in spec.methods:
        if isinstance(method, Op):
            ops.append(method)
    return ops

def cost_of(e, pool=RUNTIME_POOL):
    return None

class Cost(object):
    BETTER = Order.LT
    WORSE  = Order.GT

INVERT = {
    Cost.BETTER: Cost.WORSE,
    Cost.WORSE: Cost.BETTER }

def create_context(*exps):
    fvs = OrderedSet()
    for e in exps:
        fvs |= free_vars(e)
    svs = OrderedSet()
    for x in itertools.chain(*[all_exps(e) for e in exps]):
        if isinstance(x, EStateVar):
            for v in free_vars(x.e):
                svs.add(v)
    args = fvs - svs
    return RootCtx(state_vars=svs, args=args)

def _assert_cmp(e1, c1, e2, c2, cmp, assumptions, freebies : [Exp] = [], ops : [Op] = []):
    ctx = create_context(e1, e2)

    cm = CostModel(assumptions=assumptions, freebies=freebies, ops=ops)

    c = cm.compare(e1, e2, context=ctx, pool=RUNTIME_POOL)
    if c != cmp:
        debug_comparison(cm, e1, e2, ctx)
        assert c == cmp, "expected {}, but was {}".format(cmp, c)

def assert_cmp(e1, c1, e2, c2, cmp, assumptions : Exp = ETRUE, freebies : [Exp] = [], ops : [Op] = []):
    _assert_cmp(e1, c1, e2, c2, cmp, assumptions, freebies, ops)
    _assert_cmp(e2, c2, e1, c1, INVERT[cmp], assumptions, freebies, ops)

class TestCostModel(unittest.TestCase):

    def test_map_vs_filter(self):
        # e1 = Filter {(\_var11 : xs.Handle -> ((_var11).val == z))} ((xs + []))
        xs = EVar("xs").with_type(TBag(INT))
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        z = EVar("z").with_type(INT)
        e1 = EFilter(EBinOp(xs, "+", EEmptyList().with_type(xs.type)),
            ELambda(x, equal(x, z)))
        e2 = EMapGet(
            EStateVar(EMakeMap2(xs,
                ELambda(x, EFilter(xs, ELambda(y, EEq(y, x)))))),
            z)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert valid(equal(e1, e2))

        c1 = cost_of(e1)
        c2 = cost_of(e2)
        assert_cmp(e1, c1, e2, c2, Cost.WORSE)

    def test_useless_map1(self):
        xs = EVar("xs").with_type(INT_BAG)
        x = EVar("x").with_type(INT)
        e1 = EFilter(xs, ELambda(x, EGt(x, ZERO))).with_type(xs.type)
        e2 = EMap(e1, ELambda(x, x)).with_type(xs.type)
        print(asymptotic_runtime(e1))
        print(asymptotic_runtime(e2))
        assert asymptotic_runtime(e1) < asymptotic_runtime(e2)

    def test_useless_map2(self):
        xs = EVar("xs").with_type(INT_BAG)
        x = EVar("x").with_type(INT)
        e1 = EFilter(xs, ELambda(x, EGt(x, ZERO))).with_type(xs.type)
        e2 = EMap(e1, ELambda(x, x)).with_type(xs.type)

        e1 = EExists(e1)
        e2 = EExists(e2)
        print(asymptotic_runtime(e1))
        print(asymptotic_runtime(e2))
        assert asymptotic_runtime(e1) < asymptotic_runtime(e2)

    def test_cardinality_of_map_lookup(self):
        e1 = EBinOp(EStateVar(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '-', ESingleton(EUnaryOp('the', EMap(EFilter(EStateVar(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))
        e2 = EBinOp(EStateVar(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), '-', EMapGet(EStateVar(EMakeMap2(EMap(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')))).with_type(TBag(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))), ELambda(EVar('_var8695').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ESingleton(EUnaryOp('the', EMap(EFilter(EVar('conns').with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EBinOp(EGetField(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_iface').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), '==', EVar('_var8695').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBool()))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), ELambda(EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), EVar('c').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TList(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TMap(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'), TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TMap(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'), TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), EVar('i').with_type(TNative('mongo::executor::ConnectionPool::ConnectionInterface*'))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))).with_type(TBag(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('mongo::HostAndPort')), ('conn_iface', TNative('mongo::executor::ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('mongo::Date_t')), ('conn_returned', TNative('mongo::Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))
        print("{}: {}".format(pprint(e1), asymptotic_runtime(e1)))
        print("{}: {}".format(pprint(e2), asymptotic_runtime(e2)))
        assert asymptotic_runtime(e1) > asymptotic_runtime(e2)

    def test_map_vs_flatmap(self):
        t = TTuple((INT, INT))
        xs = EVar("xs").with_type(TBag(t))
        x = EVar("x").with_type(t)
        e1 = EMap(EStateVar(xs), ELambda(x, ETupleGet(x, 0)))
        e2 = EFlatMap(EStateVar(xs), ELambda(x, ESingleton(ETupleGet(x, 0))))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert valid(EEq(e1, e2))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_map_vs_const_filter(self):
        # e1 = Filter {(\_var11 : xs.Handle -> ((_var11).val == z))} ((xs + []))
        xs = EVar("xs").with_type(TBag(INT))
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        e1 = EFilter(xs, ELambda(x, equal(x, ZERO)))
        e2 = EMapGet(
            EMakeMap2(xs,
                ELambda(x, EFilter(xs, ELambda(y, EEq(y, x))))),
            ZERO)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert valid(equal(e1, e2))

        c1 = cost_of(e1)
        c2 = cost_of(e2)
        assert_cmp(e1, c1, e2, c2, Cost.BETTER)

    def test_true_filter(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        e1 = ESingleton(x)
        e2 = EFilter(e1, ELambda(y, ETRUE))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_map_true_filter(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        f = ELambda(y, ZERO)
        e1 = ESingleton(x)
        e2 = EFilter(e1, ELambda(y, ETRUE))
        e1 = EMap(e1, f)
        e2 = EMap(e2, f)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_eq_true_filter(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        f = ELambda(y, ZERO)
        e1 = ESingleton(x)
        e2 = EFilter(e1, ELambda(y, ETRUE))
        e1 = EEq(e1, e1)
        e2 = EEq(e2, e2)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_eq_true_filter_in_filter(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        f = ELambda(y, ZERO)
        e1 = ESingleton(x)
        e2 = EFilter(e1, ELambda(y, ETRUE))
        e1 = EEq(e1, e1)
        e2 = EEq(e2, e2)
        e1 = EFilter(ESingleton(x), ELambda(y, e1))
        e2 = EFilter(ESingleton(x), ELambda(y, e2))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_add_empty(self):
        ys = EVar('ys').with_type(TBag(THandle('ys', TInt())))
        e1 = ys
        e2 = EBinOp(ys, "+", EEmptyList().with_type(ys.type))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_sum_empty(self):
        e1 = ENum(0).with_type(TInt())
        e2 = EUnaryOp("sum", EEmptyList().with_type(TBag(TInt()))).with_type(TInt())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_identity_map(self):
        xs = EVar("xs").with_type(TBag(INT))
        e1 = xs
        e2 = EMap(xs, mk_lambda(INT, lambda x: x))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert valid(equal(e1, e2))
        cost1 = cost_of(e1)
        cost2 = cost_of(e2)
        assert_cmp(e1, cost1, e2, cost2, Cost.BETTER)

    def test_tuples(self):
        sv = EVar("sv").with_type(THandle("elem_type", INT))
        x = EVar("x").with_type(sv.type)
        e = ETupleGet(ETuple((sv, x)), 1)
        assert retypecheck(e)
        assert_cmp(e, cost_of(e), x, cost_of(x), Cost.WORSE)

    def test_improvement_to_tuple(self):
        l = EUnaryOp(UOp.Length, fresh_var(INT_BAG))
        e1 = ETuple((l,    ONE)).with_type(TTuple((INT, INT)))
        e2 = ETuple((ZERO, ONE)).with_type(TTuple((INT, INT)))
        assert retypecheck(e1) and retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    def test_pointless_filter(self):
        Enum = TEnum(("A", "B", "C"))
        A, B, C = [EEnumEntry(case).with_type(Enum) for case in Enum.cases]
        Type = THandle("elem_type", TRecord((("st", Enum),)))
        entries = EVar("xs").with_type(TBag(Type))
        entry = ESingleton(EVar("q").with_type(Type))
        zero = ENum(0).with_type(INT)
        one = ENum(1).with_type(INT)
        zero_the_hard_way = EUnaryOp(UOp.Sum, EMap(EFilter(entries, mk_lambda(Type, lambda x: EFALSE)), mk_lambda(Type, lambda x: one)))
        x = EVar("x").with_type(Type)
        p1 = EBinOp(equal(EGetField(EGetField(x, "val"), "st"), A), BOp.Or, equal(EGetField(EGetField(x, "val"), "st"), B))
        p2 = EBinOp(equal(zero, zero_the_hard_way), BOp.And, p1)
        e1 = EFilter(entry, ELambda(x, p1))
        e2 = EFilter(entry, ELambda(x, p2))
        assert retypecheck(e1), pprint(e1)
        assert retypecheck(e2), pprint(e2)
        assert valid(equal(e1, e2))
        assert_cmp(p1, cost_of(p1), p2, cost_of(p2), Cost.BETTER)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_flatmap(self):
        t = THandle("elem_type", INT)
        x = EVar("x").with_type(t)
        y = EVar("y").with_type(t)
        z = EVar("z").with_type(t)
        filt = EFilter(ESingleton(x), mk_lambda(t, lambda _: EEq(y, z)))
        e1 = EMap(filt, mk_lambda(t, lambda v: ZERO))
        e2 = EFlatMap(filt, mk_lambda(t, lambda w: subst(e1, {x.id:w})))
        assert retypecheck(e1)
        assert retypecheck(e2)
        cost1 = cost_of(e1)
        cost2 = cost_of(e2)
        assert_cmp(e1, cost1, e2, cost2, Cost.BETTER)

    def test_filter_singleton(self):
        x = EVar("x").with_type(INT)
        xs = EVar("xs").with_type(TBag(INT))
        e1 = EMap(EFilter(ESingleton(x), ELambda(x, EEq(x, ZERO))), ELambda(x, ONE))
        e2 = EMap(EFilter(EStateVar(xs), ELambda(x, EEq(x, ZERO))), ELambda(x, ONE))
        assert retypecheck(e1)
        assert retypecheck(e2)
        cost1 = cost_of(e1)
        cost2 = cost_of(e2)
        print("cost( {} ) = {}".format(pprint(e1), cost1))
        print("cost( {} ) = {}".format(pprint(e2), cost2))
        assumptions = EIn(x, xs)
        assert_cmp(e1, cost1, e2, cost2, Cost.BETTER, assumptions=assumptions)

    def test_int_arith_state_vs_non_int(self):
        ops = get_ops(
            """
            Spec:
                state x : Int

                op o()
                    x = x + 1;
            """
        )
        s1 = EBinOp(EVar("x").with_type(INT), "+", ONE)
        s2 = EVar("x").with_type(INT)
        e1 = EStateVar(s1)
        e2 = EBinOp(EStateVar(s2).with_type(s2.type), "+", ONE)
        assert retypecheck(e1)
        assert retypecheck(e2)
        cost1 = cost_of(e1)
        cost2 = cost_of(e2)
        #assert_cmp(e1, cost1, e2, cost2, Cost.BETTER, ops=ops)
        assert_cmp(e1, cost1, e2, cost2, Cost.WORSE, freebies=[s2], ops=ops)

    def test_len_in_state_vs_recalc(self):
        ops = get_ops(
            """
            Spec:
                state xs : List<Int>

                op o(xs : List <Int>, i : Int)
                    xs = xs[:i] + xs[i+1:];
            """
        )
        xs1 = EVar("xs").with_type(TBag(INT))
        xs2 = EStateVar(xs1)
        e1 = EStateVar(EUnaryOp(UOp.Length, xs1).with_type(INT))
        e2 = ELen(xs2)
        assert retypecheck(e1)
        assert retypecheck(e2)
        cost1 = cost_of(e1)
        cost2 = cost_of(e2)
        assert_cmp(e1, cost1, e2, cost2, Cost.BETTER)
        assert_cmp(e1, cost1, e2, cost2, Cost.BETTER, ops=ops)

    def test_state_list_vs_int(self):
        ops = get_ops(
            """
            Spec:
                state x : Int
                op o(i : Int) x = i;
            """
        )
        xs = EVar("xs").with_type(TList(INT))
        x = EVar("x").with_type(INT)
        slice_xs = EListSlice(xs, ZERO, x).with_type(xs.type)
        assert retypecheck(slice_xs)
        e1 = EStateVar(x)
        e2 = EStateVar(slice_xs)
        assert retypecheck(e1)
        assert retypecheck(e2)
        cost1 = cost_of(e1)
        cost2 = cost_of(e2)
        assert_cmp(e1, cost1, e2, cost2, Cost.BETTER, ops=ops)

    def test_filter_sliced_list(self):
        ops = get_ops(
            """
            Spec:
                state xs : List<Int>

                op o(xs : List <Int>, i : Int)
                    xs = xs[:i] + xs[i+1:];
            """
        )
        for op in ops:
            print(pprint(op))

    def test_let(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        e1 = ESum([x, x, x, x])
        e2 = ELet(ESum([x, x]), ELambda(y, ESum([y, y])))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert valid(EEq(e1, e2))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    def test_regression1(self):
        e1 = EFilter(EUnaryOp('distinct', EBinOp(EUnaryOp('distinct', EMap(ESingleton(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'inUse').with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool())), '+', EMap(ESingleton(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), ECond(EBinOp(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), '==', EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBool()), EVar('inUse').with_type(TBool()), EGetField(EGetField(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'inUse').with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool())), ELambda(EVar('_var156894').with_type(TBool()), EBinOp(EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('DiskAndMemory').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()), 'or', EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('MemoryOnly').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))
        e2 = EFilter(EUnaryOp('distinct', EBinOp(EUnaryOp('distinct', EMap(EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('DiskAndMemory').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()), 'or', EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('MemoryOnly').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EGetField(EGetField(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'inUse').with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool())), '+', EMap(EFilter(EVar('entries').with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('DiskAndMemory').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()), 'or', EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('MemoryOnly').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))), ELambda(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), ECond(EBinOp(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), '==', EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))))).with_type(TBool()), EVar('inUse').with_type(TBool()), EGetField(EGetField(EVar('_var156899').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'inUse').with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool()))).with_type(TBag(TBool())), ELambda(EVar('_var156894').with_type(TBool()), EBinOp(EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('DiskAndMemory').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool()), 'or', EBinOp(EGetField(EGetField(EVar('e').with_type(THandle('Entry', TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool()))))), 'val').with_type(TRecord((('key', TNative('uint64_t')), ('pixmap', TNative('QPixmap *')), ('indexData', TNative('QByteArray')), ('memSize', TInt()), ('diskSize', TInt()), ('st', TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), ('inUse', TBool())))), 'st').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid'))), '==', EEnumEntry('MemoryOnly').with_type(TEnum(('Disk', 'Loading', 'DiskAndMemory', 'MemoryOnly', 'Saving', 'NetworkPending', 'IndexPending', 'Invalid')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))
        c1 = cost_of(e1)
        c2 = cost_of(e2)
        assert_cmp(e1, c1, e2, c2, Cost.BETTER)

    def check_transitive(self, e1, e2, e3, assumptions=ETRUE):
        ctx = create_context(e1, e2, e3)
        cm = CostModel(assumptions=assumptions)
        for (e1, e2, e3) in itertools.permutations([e1, e2, e3]):
            if cm.compare(e1, e2, ctx, RUNTIME_POOL) == Cost.WORSE and cm.compare(e2, e3, ctx, RUNTIME_POOL) == Cost.WORSE:
                debug_comparison(cm, e1, e2, ctx)
                debug_comparison(cm, e2, e3, ctx)
                debug_comparison(cm, e1, e3, ctx)
                assert cm.compare(e1, e3, ctx, RUNTIME_POOL) == Cost.WORSE

    def test_regression2(self):
        e1 = EBinOp(EMap(EFlatMap(EStateVar(EUnaryOp('distinct', EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var111656').with_type(TNative('HostAndPort')), EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), '-', ESingleton(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))
        e2 = EBinOp(EMap(EFlatMap(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EStateVar(EUnaryOp('distinct', EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var111656').with_type(TNative('HostAndPort')), EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), '-', ESingleton(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))
        e3 = EBinOp(EMap(EBinOp(EFlatMap(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), '-', EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var111681').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), '-', ESingleton(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))))
        self.check_transitive(e1, e2, e3)

    def test_regression3(self):
        t = THandle("foo", INT)
        x = EVar("x").with_type(t)
        xs = EVar("xs").with_type(TBag(t))
        e1 = EBinOp(ESingleton(EGetField(x, "val")), "-", EStateVar(EMap(xs, mk_lambda(t, lambda x: EGetField(x, "val")))))
        assert retypecheck(e1)
        e2 = subst(e1, { xs.id: EBinOp(xs, "+", xs).with_type(xs.type) })
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression4(self):
        t = THandle("foo", INT)
        x = EVar("x").with_type(t)
        xs = EVar("xs").with_type(TBag(t))
        e1 = EStateVar(EMap(xs, mk_lambda(t, lambda x: EGetField(x, "val"))))
        assert retypecheck(e1)
        e2 = subst(e1, { xs.id: EBinOp(xs, "+", xs).with_type(xs.type) })
        assert e1 != e2
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression5(self):
        xs = EVar("xs").with_type(INT_BAG)
        e1 = EEq(xs, EEmptyList().with_type(xs.type))
        e2 = EUnaryOp(UOp.Empty, xs)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    # def test_regression6(self):
    #     x = EVar("x").with_type(INT)
    #     xs = EVar("xs").with_type(INT_BAG)
    #     e1 = EIn(x, EStateVar(EUnaryOp(UOp.Distinct, xs)))
    #     e2 = EMapGet(EStateVar(EMakeMap2(xs, mk_lambda(INT, lambda x: ETRUE))), x)
    #     assert retypecheck(e1)
    #     assert retypecheck(e2)
    #     assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    # def test_regression9(self):
    #     t = THandle("Conn", TRecord((("conn_host", INT),)))
    #     c = EVar("c").with_type(t)
    #     conns = EVar("conns").with_type(TBag(t))
    #     _var3100915 = EVar("_var3100915").with_type(t)
    #     f = ELambda(_var3100915, EGetField(EGetField(_var3100915, "val"), "conn_host"))
    #     # Map {(\_var3100915 -> ((_var3100915).val).conn_host)} (((EStateVar(conns) + [c]) - [_var3100915]))
    #     e1 = EMap(EBinOp(EBinOp(conns, "+", ESingleton(c)), "-", ESingleton(_var3100915)), f)
    #     assert retypecheck(e1)
    #     # Map {(\_var3100915 -> ((_var3100915).val).conn_host)} (((((EStateVar(conns) + [c]) - [_var3100915]) + [c]) - [_var3100915]))
    #     e2 = EMap(EBinOp(EBinOp(EBinOp(EBinOp(conns, "+", ESingleton(c)), "-", ESingleton(_var3100915)), "+", ESingleton(c)), "-", ESingleton(_var3100915)), f)
    #     assert retypecheck(e2)
    #     assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression10(self):
        t = THandle("Conn", TRecord((("conn_host", INT),)))
        c = EVar("c").with_type(t)
        conns = EVar("conns").with_type(TBag(t))
        _var3100915 = EVar("_var3100915").with_type(t)
        e1 = EBinOp(EBinOp(conns, "+", ESingleton(c)), "-", ESingleton(_var3100915))
        e2 = EBinOp(EBinOp(EBinOp(EBinOp(conns, "+", ESingleton(c)), "-", ESingleton(_var3100915)), "+", ESingleton(c)), "-", ESingleton(_var3100915))
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression11(self):
        e1 = ECond(EMapGet(EStateVar(EMakeMap2(EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var106064').with_type(TNative('HostAndPort')), EBool(True).with_type(TBool()))).with_type(TMap(TNative('HostAndPort'), TBool()))).with_type(TMap(TNative('HostAndPort'), TBool())), EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBool()), EBinOp(EStateVar(EUnaryOp('distinct', EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), '-', ESingleton(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), EEmptyList().with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))
        e2 = EBinOp(EStateVar(ECond(EUnaryOp('unique', EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBool()), EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), EEmptyList().with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), '-', ESingleton(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))
        e3 = ECond(EMapGet(EStateVar(EMakeMap2(EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var106064').with_type(TNative('HostAndPort')), EBool(True).with_type(TBool()))).with_type(TMap(TNative('HostAndPort'), TBool()))).with_type(TMap(TNative('HostAndPort'), TBool())), EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBool()), EBinOp(EStateVar(EMap(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))))), ELambda(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), EGetField(EGetField(EVar('_var106088').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), '-', EBinOp(ESingleton(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBag(TNative('HostAndPort'))), '+', ESingleton(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort'))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), EEmptyList().with_type(TBag(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort')))
        self.check_transitive(e1, e2, e3)

    def test_regression12(self):
        e1 = EUnaryOp('empty', ECond(EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()), EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBool())
        e2 = EBinOp(EUnaryOp('len', EFilter(ECond(EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('ETRUE'))), EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool())
        e3 = EUnaryOp('empty', ECond(EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()), ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBool())
        self.check_transitive(e1, e2, e3)

    def test_regression13(self):
        e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        self.check_transitive(e1, e2, e3)

    def test_regression14(self):
        e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        e3 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        self.check_transitive(e1, e2, e3)

    def test_regression15(self):
        e1 = EBinOp(EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        e2 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        e3 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        self.check_transitive(e1, e2, e3)

    # def test_regression16(self):
    #     e1 = EBinOp(EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression17(self):
    #     e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression18(self):
    #     e1 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression19(self):
    #     e1 = EFlatMap(EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EFlatMap(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EFlatMap(EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression20(self):
    #     e1 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EFlatMap(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression21(self):
    #     e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression22(self):
    #     e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression23(self):
    #     e1 = EBinOp(EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression24(self):
    #     e1 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression25(self):
    #     e1 = EFlatMap(EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EFlatMap(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EFlatMap(EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression26(self):
    #     e1 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EFlatMap(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression27(self):
    #     e1 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression28(self):
    #     e1 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EUnaryOp('distinct', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression29(self):
    #     e1 = EFlatMap(EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EFlatMap(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression30(self):
    #     e1 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression31(self):
    #     e1 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(ENative(ENum(0).with_type(TInt())).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EUnaryOp('distinct', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression32(self):
    #     e1 = ECond(EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()), ECond(EBinOp(EUnaryOp('len', EFilter(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457689').with_type(TNative('ETRUE')), EBinOp(EStateVar(EArgMin(EVar('xs').with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), ENum(1).with_type(TInt()))).with_type(TNative('ETRUE'))).with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool()), ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), EEmptyList().with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EFilter(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EBinOp(EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression33(self):
    #     e1 = EBinOp(EStateVar(EArgMin(EVar('xs').with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), ENum(1).with_type(TInt()))).with_type(TNative('ETRUE'))).with_type(TNative('ETRUE')), 'in', EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TBool())
    #     e2 = EBinOp(EUnaryOp('len', EFilter(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool())
    #     e3 = EBinOp(EUnaryOp('len', EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TInt()), '>', ECond(EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()), ENum(1).with_type(TInt()), ENum(0).with_type(TInt())).with_type(TInt())).with_type(TBool())
    #     self.check_transitive(e1, e2, e3)

    # def test_regression34(self):
    #     e1 = EUnaryOp('empty', ECond(EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()), EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBool())
    #     e2 = EBinOp(EUnaryOp('len', EFilter(ECond(EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('ETRUE'))), EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool())
    #     e3 = EUnaryOp('empty', ECond(EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()), ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBool())
    #     self.check_transitive(e1, e2, e3)

    # def test_regression35(self):
    #     e1 = EFlatMap(EBinOp(ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EFlatMap(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression36(self):
    #     e1 = EFlatMap(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EFlatMap(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    # def test_regression37(self):
    #     e1 = EFlatMap(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     e2 = EBinOp(EFlatMap(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE'))), '+', EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
    #     e3 = EFlatMap(EBinOp(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EFilter(EBinOp(EStateVar(EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '-', ESingleton(EVar('x').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var6457688').with_type(TNative('ETRUE')), EBinOp(EVar('x').with_type(TNative('ETRUE')), '==', EVar('_var6457688').with_type(TNative('ETRUE'))).with_type(TBool()))).with_type(TBag(TNative('ETRUE'))))).with_type(TBag(TNative('ETRUE')))
    #     self.check_transitive(e1, e2, e3)

    def test_min_distinct1(self):
        t = TNative("Foo")
        f = mk_lambda(t, lambda x: x)
        xs = EVar("xs").with_type(TBag(t))
        x = EVar("x").with_type(t)
        e1 = EArgMin(EBinOp(ESingleton(EStateVar(EArgMin(xs, f))), "+", ESingleton(x)), f)
        e2 = EArgMin(EBinOp(EUnaryOp(UOp.Distinct, EStateVar(xs)), "+", ESingleton(x)), f)
        assert retypecheck(e1)
        assert retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_min_distinct2(self):
        e1 = ECond(EStateVar(EUnaryOp('exists', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBool())).with_type(TBool()), EArgMin(EBinOp(ESingleton(EStateVar(EArgMin(EVar('xs').with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var814').with_type(TNative('ETRUE')), EVar('_var814').with_type(TNative('ETRUE')))).with_type(TNative('ETRUE'))).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('i').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var814').with_type(TNative('ETRUE')), EVar('_var814').with_type(TNative('ETRUE')))).with_type(TNative('ETRUE')), EVar('i').with_type(TNative('ETRUE'))).with_type(TNative('ETRUE'))
        e2 = ECond(EStateVar(EUnaryOp('exists', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBool())).with_type(TBool()), EArgMin(EBinOp(EStateVar(EUnaryOp('distinct', EMap(EVar('xs').with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var814').with_type(TNative('ETRUE')), EArgMin(EVar('xs').with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var814').with_type(TNative('ETRUE')), EVar('_var814').with_type(TNative('ETRUE')))).with_type(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('i').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var814').with_type(TNative('ETRUE')), EVar('_var814').with_type(TNative('ETRUE')))).with_type(TNative('ETRUE')), EVar('i').with_type(TNative('ETRUE'))).with_type(TNative('ETRUE'))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_min_distinct3(self):
        e1 = ECond(EBinOp(EArgMin(EBinOp(ESingleton(EStateVar(EArgMin(EVar('xs').with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var2326292').with_type(TNative('ETRUE')), EVar('_var2326292').with_type(TNative('ETRUE')))).with_type(TNative('ETRUE'))).with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('i').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var2326292').with_type(TNative('ETRUE')), EVar('_var2326292').with_type(TNative('ETRUE')))).with_type(TNative('ETRUE')), 'in', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('ETRUE'))), ESingleton(EVar('i').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        e2 = ECond(EBinOp(EArgMin(EBinOp(EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), '+', ESingleton(EVar('i').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE'))), ELambda(EVar('_var2326292').with_type(TNative('ETRUE')), EVar('_var2326292').with_type(TNative('ETRUE')))).with_type(TNative('ETRUE')), 'in', EStateVar(EUnaryOp('distinct', EVar('xs').with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('ETRUE'))), ESingleton(EVar('i').with_type(TNative('ETRUE'))).with_type(TBag(TNative('ETRUE')))).with_type(TBag(TNative('ETRUE')))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_in_vs_eq(self):
        x = EVar("x").with_type(INT)
        y = EVar("y").with_type(INT)
        e1 = EEq(x, y)
        e2 = EIn(x, ESingleton(y).with_type(INT_BAG))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression38(self):
        e1 = EStateVar(EGetField(ETupleGet(EArgMin(EFilter(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EBinOp(EGetField(EMakeRecord((('score', EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat())), ('startOffset', ENum(0).with_type(TInt())), ('endOffset', ENum(0).with_type(TInt())), ('important', EBool(False).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt()))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt())).with_type(TInt())
        e2 = EStateVar(EGetField(ETupleGet(EArgMin(EFilter(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EBinOp(EGetField(EMakeRecord((('score', EGetField(EMakeRecord((('score', EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat())), ('startOffset', ENum(0).with_type(TInt())), ('endOffset', ENum(0).with_type(TInt())), ('important', EBool(False).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat())), ('startOffset', ENum(0).with_type(TInt())), ('endOffset', ENum(0).with_type(TInt())), ('important', EBool(False).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var690').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt()))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt())).with_type(TInt())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    @unittest.skip("Not obvious if this does anything")
    def test_smaller_state_var(self):
        e1 = EStateVar(EVar("xs").with_type(INT_BAG)).with_type(INT_BAG)
        e2 = EStateVar(EFilter(e1.e, mk_lambda(INT, lambda x: EEq(x, ZERO))).with_type(INT_BAG)).with_type(INT_BAG)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    def test_var_vs_len(self):
        v = fresh_var(INT)
        e = EUnaryOp(UOp.Length, EEmptyList().with_type(INT_BAG)).with_type(INT)
        for pool in (RUNTIME_POOL, STATE_POOL):
            assert_cmp(v, cost_of(v, pool=pool), e, cost_of(e, pool=pool), Cost.BETTER)

    def test_regression39(self):
        e1 = ECond(EUnaryOp('empty', EFilter(EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), EArgMax(EMap(ECond(EGetField(ETupleGet(ETuple((EVar('startOffset').with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()), ESingleton(ETuple((EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt()), ECond(ECond(EGetField(ETupleGet(ETuple((EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()), EBool(False).with_type(TBool()), EBool(True).with_type(TBool())).with_type(TBool()), EArgMax(EMap(EFilter(EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt()), EArgMax(EBinOp(ESingleton(EArgMax(EMap(EFilter(EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), '+', ESingleton(EArgMax(EMap(ECond(EGetField(ETupleGet(ETuple((EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()), ESingleton(ETuple((EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt())).with_type(TInt())).with_type(TInt())
        e2 = ECond(EUnaryOp('empty', EFilter(EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), EArgMax(EMap(ECond(EGetField(ETupleGet(ETuple((EVar('startOffset').with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()), ESingleton(ETuple((EVar('startOffset').with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt()), ECond(ECond(EGetField(ETupleGet(ETuple((EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()), EBool(False).with_type(TBool()), EBool(True).with_type(TBool())).with_type(TBool()), EArgMax(EMap(EFilter(EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt()), EArgMax(EBinOp(ESingleton(EArgMax(EMap(EFilter(EStateVar(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt())), '+', ESingleton(EArgMax(EMap(ECond(EGetField(ETupleGet(ETuple((EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()), ESingleton(ETuple((EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), EMakeRecord((('score', EVar('score').with_type(TFloat())), ('startOffset', EVar('startOffset').with_type(TInt())), ('endOffset', EVar('endOffset').with_type(TInt())), ('important', EBinOp(EBinOp(EUnaryOp('empty', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool()), 'or', EBinOp(EVar('score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('len', EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TInt()), '<', ECall('MAX_TOKENS', ()).with_type(TInt())).with_type(TBool())).with_type(TBool())))).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), EEmptyList().with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var41468').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'endOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt())).with_type(TBag(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var41462').with_type(TInt()), EVar('_var41462').with_type(TInt()))).with_type(TInt())).with_type(TInt())).with_type(TInt())
        assert e1 != e2
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    @unittest.skip("ambiguous")
    def test_regression40(self):
        pool = STATE_POOL
        e1 = EArgMin(EMap(EFilter(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EBinOp(EGetField(ETupleGet(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var679').with_type(TInt()), EVar('_var679').with_type(TInt()))).with_type(TInt())
        e2 = EGetField(ETupleGet(EArgMin(EFilter(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EBinOp(EGetField(ETupleGet(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'score').with_type(TFloat()), '>', ECall('floatZero', ()).with_type(TFloat())).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var685').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt()))).with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))), 'startOffset').with_type(TInt())
        assert valid(EImplies(EBinOp(EUnaryOp('unique', EMap(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool()))))))), ELambda(EVar('s').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), ETupleGet(EVar('s').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))), 0).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBool()), 'and', EBinOp(EBinOp(ECall('MAX_TOKENS', ()).with_type(TInt()), '>', ENum(0).with_type(TInt())).with_type(TBool()), 'and', EUnaryOp('unique', EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TInt()), ('endOffset', TInt()), ('important', TBool())))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), EEq(e1, e2)), model_callback=print)
        assert_cmp(e1, cost_of(e1, pool=pool), e2, cost_of(e2, pool=pool), Cost.WORSE)

    def test_esv_empty(self):
        e1 = EEmptyList().with_type(INT_BAG)
        e2 = EStateVar(e1).with_type(e1.type)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_esv_constant(self):
        e1 = ZERO
        e2 = EStateVar(e1).with_type(e1.type)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_pointless_map(self):
        e1 = EEmptyList().with_type(INT_BAG)
        e2 = EMap(e1, mk_lambda(INT, lambda x: ZERO)).with_type(INT_BAG)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_map_singleton(self):
        t = THandle("elem_type", INT)
        x = EVar("x").with_type(t)
        e1 = ESingleton(EGetField(x, "val").with_type(INT)).with_type(INT_BAG)
        e2 = EMap(ESingleton(x).with_type(TBag(t)), mk_lambda(t, lambda x: EGetField(x, "val").with_type(INT))).with_type(INT_BAG)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    @unittest.skip("No obvious contribution")
    def test_map_value_size_matters(self):
        xs = EVar("xs").with_type(INT_BAG)
        e1 = EMakeMap2(xs, mk_lambda(INT, lambda _: EBinOp(EEmptyList().with_type(INT_BAG), "+", EEmptyList().with_type(INT_BAG)).with_type(INT_BAG))).with_type(TMap(INT, INT_BAG))
        e2 = EMakeMap2(xs, mk_lambda(INT, lambda _: ESingleton(ONE).with_type(INT_BAG))).with_type(TMap(INT, INT_BAG))
        e1 = EStateVar(e1).with_type(e1.type)
        e2 = EStateVar(e2).with_type(e2.type)
        assert e1.size() > e2.size()
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression41(self):
        """
        Doing a field lookup should not outweigh the cost of storing more data
        on the data structure.

        This is a very important test!

        It says that you should prefer
            map[x.val]
        over
            map[x]
        when the former allows `map` to be smaller.
        """
        ops = get_ops(
            """
            Spec:
                handletype H = Native "Value"
                state xs : Bag<H>

                op o(xs : Bag<H>, h : H)
                    xs.add(h);
            """
        )
        ops = []
        e1 = ECond(EBinOp(EMapGet(EStateVar(EMakeMap2(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3821').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var3821').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var3818').with_type(TNative('Value')), EUnaryOp('len', EFilter(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3821').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var3821').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var3819').with_type(TNative('Value')), EBinOp(EVar('_var3818').with_type(TNative('Value')), '==', EVar('_var3819').with_type(TNative('Value'))).with_type(TBool()))).with_type(TBag(TNative('Value')))).with_type(TInt()))).with_type(TMap(TNative('Value'), TInt()))).with_type(TMap(TNative('Value'), TInt())), EGetField(EVar('x').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TInt()), '>', ENum(1).with_type(TInt())).with_type(TBool()), EEmptyList().with_type(TBag(TNative('Value'))), ESingleton(EGetField(EVar('x').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TBag(TNative('Value')))).with_type(TBag(TNative('Value')))
        e2 = ECond(EBinOp(EMapGet(EStateVar(EMakeMap2(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3821').with_type(THandle('H', TNative('Value'))), EMapGet(EMakeMap2(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3821').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var3821').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var3818').with_type(TNative('Value')), EUnaryOp('len', EFilter(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3821').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var3821').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var3819').with_type(TNative('Value')), EBinOp(EVar('_var3818').with_type(TNative('Value')), '==', EVar('_var3819').with_type(TNative('Value'))).with_type(TBool()))).with_type(TBag(TNative('Value')))).with_type(TInt()))).with_type(TMap(TNative('Value'), TInt())), EGetField(EVar('_var3821').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TInt()))).with_type(TMap(THandle('H', TNative('Value')), TInt()))).with_type(TMap(THandle('H', TNative('Value')), TInt())), EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TInt()), '>', ENum(1).with_type(TInt())).with_type(TBool()), EEmptyList().with_type(TBag(TNative('Value'))), ESingleton(EGetField(EVar('x').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TBag(TNative('Value')))).with_type(TBag(TNative('Value')))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER, assumptions=EBinOp(EBinOp(EUnaryOp('unique', EVar('xs').with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBool()), 'and', EBinOp(EVar('x').with_type(THandle('H', TNative('Value'))), 'in', EVar('xs').with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var19').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var19').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var20').with_type(THandle('H', TNative('Value'))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var19').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var19').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var21').with_type(THandle('H', TNative('Value'))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var20').with_type(THandle('H', TNative('Value'))), '==', EVar('_var21').with_type(THandle('H', TNative('Value')))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var20').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')), '==', EGetField(EVar('_var21').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3097').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var3097').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3098').with_type(THandle('H', TNative('Value'))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3097').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var3097').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var3099').with_type(THandle('H', TNative('Value'))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var3098').with_type(THandle('H', TNative('Value'))), '==', EVar('_var3099').with_type(THandle('H', TNative('Value')))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var3098').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')), '==', EGetField(EVar('_var3099').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool()), ops=ops)

    def test_regression42(self):
        assumptions = EBinOp(EBinOp(EUnaryOp('unique', EVar('xs').with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBool()), 'and', EUnaryOp('not', EBinOp(EVar('x').with_type(THandle('H', TNative('Value'))), 'in', EVar('xs').with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var16').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var16').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var17').with_type(THandle('H', TNative('Value'))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var16').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var16').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var18').with_type(THandle('H', TNative('Value'))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var17').with_type(THandle('H', TNative('Value'))), '==', EVar('_var18').with_type(THandle('H', TNative('Value')))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var17').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')), '==', EGetField(EVar('_var18').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var112915').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var112915').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var112918').with_type(THandle('H', TNative('Value'))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var112915').with_type(THandle('H', TNative('Value'))), ESingleton(EVar('_var112915').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value')))))).with_type(TBag(THandle('H', TNative('Value')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Value')))).with_type(TBag(THandle('H', TNative('Value'))))).with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var112919').with_type(THandle('H', TNative('Value'))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var112918').with_type(THandle('H', TNative('Value'))), '==', EVar('_var112919').with_type(THandle('H', TNative('Value')))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var112918').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')), '==', EGetField(EVar('_var112919').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value'))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())
        e1 = EFilter(EUnaryOp('distinct', EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var124591').with_type(THandle('H', TNative('Value'))), EVar('_var124589').with_type(TNative('Value')))).with_type(TBag(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var124588').with_type(TNative('Value')), EBinOp(EVar('_var124588').with_type(TNative('Value')), 'in', EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var124591').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var124591').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value')))).with_type(TBool()))).with_type(TBag(TNative('Value')))
        e2 = EFilter(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var124591').with_type(THandle('H', TNative('Value'))), EVar('_var124589').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var124588').with_type(TNative('Value')), EBinOp(EUnaryOp('len', EVar('xs').with_type(TBag(THandle('H', TNative('Value'))))).with_type(TInt()), '==', ENum(1).with_type(TInt())).with_type(TBool()))).with_type(TBag(TNative('Value')))
        e3 = EFilter(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Value')))), ELambda(EVar('_var124591').with_type(THandle('H', TNative('Value'))), EGetField(EVar('_var124591').with_type(THandle('H', TNative('Value'))), 'val').with_type(TNative('Value')))).with_type(TBag(TNative('Value'))), ELambda(EVar('_var124588').with_type(TNative('Value')), EBinOp(EVar('_var124589').with_type(TNative('Value')), '==', EVar('_var124588').with_type(TNative('Value'))).with_type(TBool()))).with_type(TBag(TNative('Value')))
        self.check_transitive(e1, e2, e3, assumptions)

    def test_filterfilter(self):
        xs = EVar("xs").with_type(INT_BAG)
        x = EVar("x").with_type(INT)
        e1 = EFilter(EStateVar(xs), ELambda(x, EAll([ENot(EEq(x, ZERO)), ENot(EEq(x, ONE))])))
        e2 = subst(e1, {"xs" : EFilter(xs, ELambda(x, ENot(EEq(x, ZERO)))).with_type(xs.type)})
        assert retypecheck(e1) and retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    # This smooths the search space, but I am ambivalent about it.
    # def test_filterfilter_and(self):
    #     xs = EVar("xs").with_type(INT_BAG)
    #     x = EVar("x").with_type(INT)
    #     e1 = EFilter(EStateVar(xs), ELambda(x, EAll([ENot(EEq(x, ZERO)), ENot(EEq(x, ONE))])))
    #     e2 = EFilter(EFilter(EStateVar(xs), ELambda(x, ENot(EEq(x, ZERO)))), ELambda(x, ENot(EEq(x, ONE))))
    #     assert retypecheck(e1) and retypecheck(e2)
    #     assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    def test_empty_empty(self):
        v = EVar("xs").with_type(INT_BAG)
        emp = EEmptyList().with_type(v.type)
        e1 = EUnaryOp(UOp.Empty, EStateVar(v).with_type(v.type)).with_type(BOOL)
        e2 = EUnaryOp(UOp.Empty, emp).with_type(BOOL)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    def test_regression43(self):
        e1 = EMapGet(EStateVar(EMakeMap2(EMap(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), ETupleGet(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), 0).with_type(TInt()))).with_type(TBag(TInt())), ELambda(EVar('_var918').with_type(TInt()), EFilter(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), EBinOp(ETupleGet(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), 0).with_type(TInt()), '==', EVar('_var918').with_type(TInt())).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))))).with_type(TMap(TInt(), TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))))).with_type(TMap(TInt(), TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))))), EVar('i').with_type(TInt())).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))))
        e2 = EFilter(EStateVar(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), EBinOp(ETupleGet(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), 0).with_type(TInt()), '==', EVar('i').with_type(TInt())).with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER, assumptions=EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), ETupleGet(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), 0).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBool()), 'and', EBinOp(ECall('MAX_TOKENS', ()).with_type(TInt()), '>', ENum(0).with_type(TInt())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('i').with_type(TInt()), '>=', ENum(0).with_type(TInt())).with_type(TBool()), 'and', EBinOp(EVar('i').with_type(TInt()), '<', EUnaryOp('len', EMap(EFilter(EVar('tokens').with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), EGetField(ETupleGet(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), 1).with_type(TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))), 'important').with_type(TBool()))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool()))))))), ELambda(EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))), EVar('_var920').with_type(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))))).with_type(TBag(TTuple((TInt(), TRecord((('score', TFloat()), ('startOffset', TNative('int')), ('endOffset', TNative('int')), ('important', TBool())))))))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()))

    # Disabled --- I'm not sure this is actually a good test
    # def test_regression44(self):
    #     e1 = ECond(EBinOp(EGetField(EVar('x').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object')), 'in', EStateVar(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10292').with_type(THandle('H', TNative('Object'))), EGetField(EVar('_var10292').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object')))).with_type(TBag(TNative('Object')))).with_type(TBag(TNative('Object')))).with_type(TBool()), EEmptyList().with_type(TBag(TNative('Object'))), ESingleton(EGetField(EVar('x').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object'))).with_type(TBag(TNative('Object')))).with_type(TBag(TNative('Object')))
    #     e2 = EBinOp(ESingleton(EGetField(EVar('x').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object'))).with_type(TBag(TNative('Object'))), '-', EStateVar(EMap(EVar('xs').with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10292').with_type(THandle('H', TNative('Object'))), EGetField(EVar('_var10292').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object')))).with_type(TBag(TNative('Object')))).with_type(TBag(TNative('Object')))).with_type(TBag(TNative('Object')))
    #     assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER, assumptions=EBinOp(EBinOp(EUnaryOp('unique', EVar('xs').with_type(TBag(THandle('H', TNative('Object'))))).with_type(TBool()), 'and', EUnaryOp('not', EBinOp(EVar('x').with_type(THandle('H', TNative('Object'))), 'in', EVar('xs').with_type(TBag(THandle('H', TNative('Object'))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10292').with_type(THandle('H', TNative('Object'))), ESingleton(EVar('_var10292').with_type(THandle('H', TNative('Object')))).with_type(TBag(THandle('H', TNative('Object')))))).with_type(TBag(THandle('H', TNative('Object')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Object')))).with_type(TBag(THandle('H', TNative('Object'))))).with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10292').with_type(THandle('H', TNative('Object'))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10292').with_type(THandle('H', TNative('Object'))), ESingleton(EVar('_var10292').with_type(THandle('H', TNative('Object')))).with_type(TBag(THandle('H', TNative('Object')))))).with_type(TBag(THandle('H', TNative('Object')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Object')))).with_type(TBag(THandle('H', TNative('Object'))))).with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10293').with_type(THandle('H', TNative('Object'))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var10292').with_type(THandle('H', TNative('Object'))), '==', EVar('_var10293').with_type(THandle('H', TNative('Object')))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var10292').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object')), '==', EGetField(EVar('_var10293').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object'))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10292').with_type(THandle('H', TNative('Object'))), ESingleton(EVar('_var10292').with_type(THandle('H', TNative('Object')))).with_type(TBag(THandle('H', TNative('Object')))))).with_type(TBag(THandle('H', TNative('Object')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Object')))).with_type(TBag(THandle('H', TNative('Object'))))).with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10292').with_type(THandle('H', TNative('Object'))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('xs').with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10292').with_type(THandle('H', TNative('Object'))), ESingleton(EVar('_var10292').with_type(THandle('H', TNative('Object')))).with_type(TBag(THandle('H', TNative('Object')))))).with_type(TBag(THandle('H', TNative('Object')))), '+', ESingleton(EVar('x').with_type(THandle('H', TNative('Object')))).with_type(TBag(THandle('H', TNative('Object'))))).with_type(TBag(THandle('H', TNative('Object')))), ELambda(EVar('_var10293').with_type(THandle('H', TNative('Object'))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var10292').with_type(THandle('H', TNative('Object'))), '==', EVar('_var10293').with_type(THandle('H', TNative('Object')))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var10292').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object')), '==', EGetField(EVar('_var10293').with_type(THandle('H', TNative('Object'))), 'val').with_type(TNative('Object'))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool()))

    def test_regression45(self):
        x = EVar("x").with_type(THandle("H", INT))
        xs = EVar("xs").with_type(TBag(x.type))
        f = mk_lambda(x.type, lambda y: EGetField(y, "val"))
        r = EUnaryOp(UOp.Distinct, EMap(EBinOp(EStateVar(xs), "-", ESingleton(x)), f))
        e1 = EBinOp(EStateVar(EUnaryOp(UOp.Distinct, EMap(xs, f))), "-", r)
        e2 = EBinOp(ESingleton(EGetField(x, "val")), "-", r)
        assert retypecheck(e1) and retypecheck(e2)
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    # Disabled --- I'm not sure this is actually a good test
    # def test_regression46(self):
    #     assumptions = EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EBinOp(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '!=', EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '==', EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), '==', EGetField(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), '==', EGetField(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
    #     e1 = EFlatMap(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EStateVar(EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var1996').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))
    #     e2 = EFlatMap(EFlatMap(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var1996').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))
    #     e3 = EFlatMap(EFlatMap(EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var1996').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))
    #     self.check_transitive(e1, e2, e3, assumptions)

    def test_regression47(self):
        e1 = EUnaryOp('exists', EMap(EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        e2 = EMapGet(EStateVar(EMakeMap2(EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var12704').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBool(True).with_type(TBool()))).with_type(TBag(TBool())), ELambda(EVar('_var33975').with_type(TBool()), EVar('_var33975').with_type(TBool()))).with_type(TMap(TBool(), TBool()))).with_type(TMap(TBool(), TBool())), EUnaryOp('exists', EMap(EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression48(self):
        e1 = EUnaryOp('exists', EFilter(EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(EGetField(EGetField(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(ETuple((EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        e2 = EBinOp(EMapGet(EStateVar(EMakeMap2(EMap(EBinOp(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), '+', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var321191').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBool(True).with_type(TBool()))).with_type(TBag(TBool())), ELambda(EVar('_var493794').with_type(TBool()), EUnaryOp('len', EFilter(EMap(EBinOp(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), '+', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var321191').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBool(True).with_type(TBool()))).with_type(TBag(TBool())), ELambda(EVar('_var493795').with_type(TBool()), EBinOp(EVar('_var493794').with_type(TBool()), '==', EVar('_var493795').with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TInt()))).with_type(TMap(TBool(), TInt()))).with_type(TMap(TBool(), TInt())), EUnaryOp('exists', EFilter(EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(EGetField(EGetField(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(ETuple((EVar('_var1993').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TInt()), '>', ENum(1).with_type(TInt())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression49(self):
        e1 = EFilter(EVar('ys').with_type(TBag(TInt())), ELambda(EVar('_var5895').with_type(TInt()), EHasKey(EStateVar(EMakeMap2(EVar('xs').with_type(TBag(TInt())), ELambda(EVar('_var5896').with_type(TInt()), EBool(True).with_type(TBool()))).with_type(TMap(TInt(), TBool()))).with_type(TMap(TInt(), TBool())), EVar('_var5895').with_type(TInt())).with_type(TBool()))).with_type(TBag(TInt()))
        e2 = EBinOp(EVar('ys').with_type(TBag(TInt())), '-', EBinOp(EVar('ys').with_type(TBag(TInt())), '-', EStateVar(EVar('xs').with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TInt()))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER, assumptions=EBinOp(EUnaryOp('unique', EVar('xs').with_type(TBag(TInt()))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('ys').with_type(TBag(TInt()))).with_type(TBool())).with_type(TBool()))

    def test_regression50(self):
        e1 = EMapGet(EStateVar(EMakeMap2(EMap(EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))), ELambda(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), EGetField(EGetField(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), 'val').with_type(TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))), 'rq_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var65941').with_type(TNative('HostAndPort')), EFilter(EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))), ELambda(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), EBinOp(EGetField(EGetField(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), 'val').with_type(TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))), 'rq_host').with_type(TNative('HostAndPort')), '==', EVar('_var65941').with_type(TNative('HostAndPort'))).with_type(TBool()))).with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))))), EVar('p').with_type(TNative('HostAndPort'))).with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))))
        e2 = EFilter(EStateVar(EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))))).with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))), ELambda(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), EBinOp(EGetField(EGetField(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), 'val').with_type(TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))), 'rq_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()))).with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    def test_regression51(self):
        e1 = EBinOp(EBinOp(EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('PROCESSING').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt()), '<', EStateVar(EVar('maxConnecting').with_type(TInt())).with_type(TInt())).with_type(TBool()), 'and', EBinOp(EBinOp(EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('CHECKED_OUT').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('PROCESSING').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '<', EStateVar(EVar('maxConnections').with_type(TInt())).with_type(TInt())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EBinOp(EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('CHECKED_OUT').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('PROCESSING').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '<', EStateVar(EVar('minConnections').with_type(TInt())).with_type(TInt())).with_type(TBool()), 'or', EBinOp(EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('PROCESSING').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '<', EUnaryOp('len', EMapGet(EStateVar(EMakeMap2(EMap(EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))), ELambda(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), EGetField(EGetField(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), 'val').with_type(TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))), 'rq_host').with_type(TNative('HostAndPort')))).with_type(TBag(TNative('HostAndPort'))), ELambda(EVar('_var65941').with_type(TNative('HostAndPort')), EFilter(EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))), ELambda(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), EBinOp(EGetField(EGetField(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), 'val').with_type(TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))), 'rq_host').with_type(TNative('HostAndPort')), '==', EVar('_var65941').with_type(TNative('HostAndPort'))).with_type(TBool()))).with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))))).with_type(TMap(TNative('HostAndPort'), TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))))), EVar('p').with_type(TNative('HostAndPort'))).with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        e2 = EBinOp(EBinOp(EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('PROCESSING').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt()), '<', EStateVar(EVar('maxConnecting').with_type(TInt())).with_type(TInt())).with_type(TBool()), 'and', EBinOp(EBinOp(EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('CHECKED_OUT').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('PROCESSING').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '<', EStateVar(EVar('maxConnections').with_type(TInt())).with_type(TInt())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EBinOp(EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('CHECKED_OUT').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('PROCESSING').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '<', EStateVar(EVar('minConnections').with_type(TInt())).with_type(TInt())).with_type(TBool()), 'or', EBinOp(EBinOp(EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('READY').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt()), '+', EUnaryOp('len', EFilter(EStateVar(EVar('conns').with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))))), ELambda(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), EBinOp(EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()), 'and', EBinOp(EGetField(EGetField(EVar('c').with_type(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))), 'val').with_type(TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool())))), 'conn_state').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), '==', EEnumEntry('PROCESSING').with_type(TEnum(('READY', 'PROCESSING', 'CHECKED_OUT')))).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Connection', TRecord((('conn_state', TEnum(('READY', 'PROCESSING', 'CHECKED_OUT'))), ('conn_host', TNative('HostAndPort')), ('conn_iface', TNative('ConnectionPool::ConnectionInterface*')), ('conn_next_refresh', TNative('Date_t')), ('conn_returned', TNative('Date_t')), ('conn_last_used', TInt()), ('conn_dropped', TBool()))))))).with_type(TInt())).with_type(TInt()), '<', EUnaryOp('len', EFilter(EStateVar(EVar('reqs').with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))))).with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))))), ELambda(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), EBinOp(EGetField(EGetField(EVar('r').with_type(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))), 'val').with_type(TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>'))))), 'rq_host').with_type(TNative('HostAndPort')), '==', EVar('p').with_type(TNative('HostAndPort'))).with_type(TBool()))).with_type(TBag(THandle('Request', TRecord((('rq_expiration', TNative('Date_t')), ('rq_host', TNative('HostAndPort')), ('rq_callback', TNative('std::unique_ptr<ConnectionPool::GetConnectionCallback>')))))))).with_type(TInt())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    @unittest.skip("ambiguous")
    def test_distribute_exists_over_or(self):
        xs = EStateVar(EVar("xs").with_type(INT_BAG))
        x = EVar("x").with_type(INT)
        e1 = EUnaryOp(UOp.Exists, EFilter(xs, ELambda(x, EAny([ECall("f", (x,)).with_type(BOOL), ECall("g", (x,)).with_type(BOOL)]))))
        assert retypecheck(e1)
        e2 = optimized_exists(e1.e)
        print(pprint(e1))
        print(pprint(e2))
        assert valid(EEq(e1, e2))
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE)

    def test_free_funcs(self):
        funcs = OrderedDict([('after', TFunc((TNative('mongo::Date_t'), TNative('mongo::Milliseconds')), TNative('mongo::Date_t'))), ('eternity', TFunc((), TNative('mongo::Date_t')))])
        a = ECall("eternity", ()).with_type(funcs["eternity"].ret_type)
        b = EUnaryOp(UOp.The, ESingleton(EUnaryOp(UOp.The, EEmptyList().with_type(TBag(a.type)))))
        assert retypecheck(b)
        e1 = ECond(EEq(a, b), a, b).with_type(a.type)
        assert_cmp(e1, cost_of(e1), b, cost_of(b), Cost.WORSE)

    def test_regression53(self):
        e1 = EStateVar(EUnaryOp('sum', EVar('l').with_type(TBag(TInt()))).with_type(TInt())).with_type(TInt())
        e2 = EUnaryOp('the', EStateVar(EUnaryOp('distinct', EMap(EVar('l').with_type(TBag(TInt())), ELambda(EVar('_var15186').with_type(TInt()), EUnaryOp('sum', EVar('l').with_type(TBag(TInt()))).with_type(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TBag(TInt()))).with_type(TInt())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER)

    @unittest.skip("No obvious contribution")
    def test_regression54(self):

        e1 = EUnaryOp('exists', EFilter(EFlatMap(EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())


        e2 = EUnaryOp('exists', EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        assumptions = EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), 'name').with_type(TNative('String /*Name*/')))).with_type(TBag(TNative('String /*Name*/')))).with_type(TBool()), 'and', EUnaryOp('unique', EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TNative('String /*GroupName*/')))).with_type(TBag(TNative('String /*GroupName*/')))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBinOp(EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EBinOp(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '!=', EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '==', EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), '==', EGetField(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), '==', EGetField(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER, assumptions=assumptions)

    def test_regression55(self):
        e1 = EUnaryOp('exists', EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EHasKey(EStateVar(EMakeMap2(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var1491398').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBool(True).with_type(TBool()))).with_type(TMap(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), TBool()))).with_type(TMap(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), TBool())), ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        e2 = EUnaryOp('exists', EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        assumptions = EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), 'name').with_type(TNative('String /*Name*/')))).with_type(TBag(TNative('String /*Name*/')))).with_type(TBool()), 'and', EUnaryOp('unique', EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TNative('String /*GroupName*/')))).with_type(TBag(TNative('String /*GroupName*/')))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBinOp(EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EBinOp(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '!=', EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '==', EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), '==', EGetField(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EUnaryOp('not', EBinOp(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool())).with_type(TBool()), 'or', EBinOp(EGetField(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), '==', EGetField(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER, assumptions=assumptions)

    def test_regression57(self):
        e1 = EUnaryOp('exists', EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        e2 = EUnaryOp('exists', EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EHasKey(EStateVar(EMakeMap2(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var151711').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBool(True).with_type(TBool()))).with_type(TMap(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), TBool()))).with_type(TMap(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), TBool())), ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        assumptions = EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), 'name').with_type(TNative('String /*Name*/')))).with_type(TBag(TNative('String /*Name*/')))).with_type(TBool()), 'and', EUnaryOp('unique', EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TNative('String /*GroupName*/')))).with_type(TBag(TNative('String /*GroupName*/')))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBinOp(EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EBinOp(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '!=', EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EBinOp(EBinOp(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '==', EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), '=>', EBinOp(EGetField(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), '==', EGetField(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool()), '=>', EBinOp(EGetField(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), '==', EGetField(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE, assumptions=assumptions)

    def test_regression58(self):
        e1 = EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())
        e2 = EHasKey(EStateVar(EMakeMap2(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var151711').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBool(True).with_type(TBool()))).with_type(TMap(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), TBool()))).with_type(TMap(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), TBool())), ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBool())
        assumptions = EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), 'name').with_type(TNative('String /*Name*/')))).with_type(TBag(TNative('String /*Name*/')))).with_type(TBool()), 'and', EUnaryOp('unique', EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TNative('String /*GroupName*/')))).with_type(TBag(TNative('String /*GroupName*/')))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBinOp(EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EBinOp(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '!=', EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EBinOp(EBinOp(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '==', EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), '=>', EBinOp(EGetField(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), '==', EGetField(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool()), '=>', EBinOp(EGetField(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), '==', EGetField(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.WORSE, assumptions=assumptions)

    def test_regression59(self):
        e1 = EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())
        e2 = EUnaryOp('exists', EFilter(EFlatMap(EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var104930').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('_var104930').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('_var104930').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('_var104930').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        assumptions = EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), 'name').with_type(TNative('String /*Name*/')))).with_type(TBag(TNative('String /*Name*/')))).with_type(TBool()), 'and', EUnaryOp('unique', EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TNative('String /*GroupName*/')))).with_type(TBag(TNative('String /*GroupName*/')))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBinOp(EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EBinOp(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '!=', EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EBinOp(EBinOp(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '==', EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), '=>', EBinOp(EGetField(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), '==', EGetField(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool()), '=>', EBinOp(EGetField(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), '==', EGetField(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER, assumptions=assumptions)

    def test_regression60(self):
        e1 = EUnaryOp('exists', EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        e2 = EUnaryOp('exists', EFilter(EStateVar(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EUnaryOp('exists', EFilter(EFlatMap(EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var104930').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(ETuple((EVar('_var104930').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('_var104930').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('_var104930').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'rosterMode').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))), '==', EEnumEntry('EVERYBODY').with_type(TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))).with_type(TBool()), 'or', EBinOp(ETuple((EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 'in', EStateVar(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())
        assumptions = EBinOp(EBinOp(EBinOp(EUnaryOp('unique', EMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EGetField(EGetField(EVar('u').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), 'name').with_type(TNative('String /*Name*/')))).with_type(TBag(TNative('String /*Name*/')))).with_type(TBool()), 'and', EUnaryOp('unique', EMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EGetField(EGetField(EVar('g').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), 'name').with_type(TNative('String /*GroupName*/')))).with_type(TBag(TNative('String /*GroupName*/')))).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), EBinOp(EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'in', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool()), 'and', EBinOp(ETupleGet(EVar('e').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EBinOp(EUnaryOp('unique', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EUnaryOp('unique', EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EUnaryOp('unique', EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))))).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool()), 'and', EBinOp(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'in', EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBool())).with_type(TBool())).with_type(TBool()), 'and', EBinOp(EBinOp(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '!=', EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), 'and', EBinOp(EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EUnaryOp('all', EMap(EBinOp(EBinOp(EBinOp(EFlatMap(EVar('users').with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), ESingleton(EVar('_var19').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 1).with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u1').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), '+', ESingleton(EVar('u2').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))).with_type(TBag(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))), ELambda(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), EBinOp(EBinOp(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), '==', EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))).with_type(TBool()), '=>', EBinOp(EGetField(EVar('_var22').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))), '==', EGetField(EVar('_var23').with_type(THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))), 'val').with_type(TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()), 'and', EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EUnaryOp('all', EMap(EBinOp(EFlatMap(EVar('groups').with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), ESingleton(EVar('_var20').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), '+', EFlatMap(EVar('groupMembers').with_type(TBag(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/'))))))))), ELambda(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), ESingleton(ETupleGet(EVar('_var21').with_type(TTuple((THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), THandle('User', TRecord((('username', TNative('String /*Username*/')), ('salt', TNative('String /*Salt*/')), ('storedKey', TNative('String /*StoredKey*/')), ('serverKey', TNative('String /*ServerKey*/')), ('iterations', TNative('int /*Iterations*/')), ('name', TNative('String /*Name*/')), ('email', TNative('String /*Email*/')), ('creationDate', TNative('java.util.Date /*CreationDate*/')), ('modificationDate', TNative('java.util.Date /*ModificationDate*/')))))))), 0).with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))))).with_type(TBag(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))), ELambda(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), EBinOp(EBinOp(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), '==', EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))))).with_type(TBool()), '=>', EBinOp(EGetField(EVar('_var24').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY')))))), '==', EGetField(EVar('_var25').with_type(THandle('Group', TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))), 'val').with_type(TRecord((('name', TNative('String /*GroupName*/')), ('description', TNative('String /*GroupDesc*/')), ('rosterMode', TEnum(('NOBODY', 'ONLY_GROUP', 'EVERYBODY'))))))).with_type(TBool())).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool()))).with_type(TBag(TBool()))).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())).with_type(TBool())
        assert_cmp(e1, cost_of(e1), e2, cost_of(e2), Cost.BETTER, assumptions=assumptions)
